@model MRT.ViewModels.CarrierFormViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container px-2">
    <h3><i class="fas fa-edit mr-2"></i>@Model.Title</h3>
    <hr />
    <div class="card">
        @using (Html.BeginForm("Save", "Carriers", FormMethod.Post, new { @id = "carrier-form" }))
        {
        <div class="row">
            <div class="col-md-6">
                <div class="card-body">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Name, new { @class = "font-weight-bold" })
                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control px-2" })
                        @Html.ValidationMessageFor(m => m.Name)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.BaseRate, new { @class = "font-weight-bold" })
                        @Html.TextBoxFor(m => m.BaseRate, new { @class = "form-control px-2" })
                        @Html.ValidationMessageFor(m => m.BaseRate)
                    </div>
                    @if (Model.Id != 0)
                    {
                    <div class="form-group">
                        <label class="font-weight-bold mb-3">States Covered</label>
                        <div id="states-accordion">
                            <div class="card">
                                <a href="#states-covered-collapse" class="card-header text-center" data-toggle="collapse" data-parent="#states-accordion">
                                    States Currently Covered<i id="states-covered-collapse-icon" class="fas fa-arrow-circle-up ml-2"></i>
                                </a>
                                <div id="states-covered-collapse" class="collapse states-collapse show">
                                    <ul id="covered-list" class="list-group list-group-flush">
                                        @if (Model.StatesCovered.Count != 0)
                                        {
                                            foreach (var state in Model.StatesCovered)
                                            {
                                                <li class="list-group-item py-2" data-state-id=@state.Id>
                                                    @state.Name
                                                    <a href="#" class="covered float-right"><i class="fas fa-minus"></i></a>
                                                </li>
                                            }
                                        }
                                        else
                                        {
                                            <li class="list-group-item">No states are currently covered</li>
                                        }
                                    </ul>
                                </div>
                                <a href="#new-state-collapse" class="card-header text-center border-top" data-toggle="collapse" data-parent="#states-accordion">
                                    Add State Coverage<i id="new-state-collapse-icon" class="fas fa-arrow-circle-down ml-2"></i>
                                </a>
                                <div id="new-state-collapse" class="collapse states-collapse">
                                    <ul id="not-covered-list" class="list-group list-group-flush">
                                        @if (Model.StatesNotCovered.Count != 0)
                                        {
                                            foreach (var state in Model.StatesNotCovered)
                                            {
                                                <li class="list-group-item py-2" data-state-id=@state.Id>
                                                    @state.Name
                                                    <a href="#" class="not-covered float-right">
                                                        <i class="fas fa-plus"></i>
                                                    </a>
                                                </li>
                                            }
                                        }
                                        else
                                        {
                                            <li class="list-group-item">No states are available for coverage</li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                    }
                </div>
            </div>
            <div class="col-sm-12">
                @Html.HiddenFor(m => m.Id)
                @Html.AntiForgeryToken()
                <div class="card-footer">
                    <div class="row">
                        <div class="col-sm-2 ml-sm-auto">
                            <button type="submit" id="carrier-form-submit" class="btn btn-info btn-block">
                                <i class="far fa-save mr-2"></i>Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        }
    </div>
</div>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            $('.covered, .not-covered').click(function (e) {
                e.preventDefault();
                var stateListItemLink = $(this);
                stateListItemLink.toggleClass('covered not-covered').children().toggleClass('fa-plus fa-minus');
                var destinationList = '',
                    sourceList = '',
                    ajaxMethod = '',
                    urlOptArg = '';
                stateListItemLink.hasClass('covered')
                    ? (destinationList = '#covered-list', sourceList = '#not-covered-list', ajaxMethod = 'post')
                    : (destinationList = '#not-covered-list', sourceList = '#covered-list', ajaxMethod = 'delete', urlOptArg = '/@Model.Id');

                var stateCoverageDto = {
                    carrierId: '@Model.Id',
                    stateId: stateListItemLink.parent().data('state-id')
                };

                $.ajax({
                    url: '/api/statescovered' + urlOptArg,
                    method: ajaxMethod,
                    data: stateCoverageDto
                })
                    .done(function (e) {
                        if ($(destinationList + ' li').length == 0) {}

                        stateListItemLink.parent().appendTo(destinationList);

                        $(destinationList + ' > li').sort(function (a, b) {
                            var aStr = $(a).data('state-id'), bStr = $(b).data('state-id');
                            return aStr > bStr ? 1 : aStr < bStr ? -1 : 0;
                        }).appendTo(destinationList);

                        if ($(sourceList + ' li').length == 0) {}
                    })
                    .fail(function (e) {
                        console.log('State coverage could not be altered, please contact the administrator');
                    });
            });

            $('#states-covered-collapse').on('hidden.bs.collapse shown.bs.collapse', function () {
                $('#states-covered-collapse-icon').toggleClass('fa-arrow-circle-down fa-arrow-circle-up');
            });
            $('#new-state-collapse').on('hidden.bs.collapse shown.bs.collapse', function () {
                $('#new-state-collapse-icon').toggleClass('fa-arrow-circle-down fa-arrow-circle-up');
            });
        });
    </script>
}